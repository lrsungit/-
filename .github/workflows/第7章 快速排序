7.1 快速排序的描述
快速排序伪代码实现：
A = [13,19,9,5,12,8,7,4,21,2,6,11]

def QuickSort(A,p,r):
    if p < r:
        q = Partition(A,p,r)
        QuickSort(A,p,q)
        QuickSort(A,q+1,r)
    
def Partition(A,p,r):
    x = A[r-1]
    i = p-1
    for j in range(p,r-1):
        if A[j] <= x:
            i = i + 1
            A[i],A[j] = A[j],A[i]
    A[i+1],A[r-1] = A[r-1],A[i+1]
    return i+1
    
QuickSort(A,0,len(A))
print(A)
练习：
7.1-1：
A = [13,19,9,5,12,8,7,4,21,2,6,11]

def QuickSort(A,p,r):
    if p < r:
        q = Partition(A,p,r)
        QuickSort(A,p,q)
        QuickSort(A,q+1,r)
    
def Partition(A,p,r):
    x = A[r-1]
    i = p-1
    for j in range(p,r-1):
        if A[j] <= x:
            i = i + 1
            A[i],A[j] = A[j],A[i]
    A[i+1],A[r-1] = A[r-1],A[i+1]
    return i+1
    
QuickSort(A,0,len(A))
print(A)
7.1-2：
q值为最后一个数字的索引。
def Partition(A,p,r):
    x = A[r-1]
    i = p
    j = r-2
    while i <= j:
        if A[i] >= x >= A[j]:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
        elif A[i] < x:
            i += 1
        elif A[j] > x:
            j -= 1
    A[i],A[r-1] = A[r-1],A[i]
    return i
7.1-3:不会
7.1-4：
A = [13,19,9,5,12,8,7,4,21,2,6,11]

def QuickSort(A,p,r):
    if p < r-1:
        q = Partition(A,p,r)
        QuickSort(A,p,q)
        QuickSort(A,q+1,r)
    
def Partition(A,p,r):
    x = A[r-1]
    i = p
    j = r-2
    while i <= j:
        if A[i] <= x <= A[j]:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
        elif A[i] > x:
            i += 1
        elif A[j] < x:
            j -= 1
    A[i],A[r-1] = A[r-1],A[i]
    return i
    
QuickSort(A,0,len(A))
print(A)
7.2 快速排序的性能
7.2-1:不会
7.2-2：取决于具体算法，书中给的伪代码是n2,而考虑7.1-2中的算法，应该是nlgn
7.2-3:不会
7.2-4:不会
7.2-5:不会
7.2-6:不会
7.3 快速排序的随机化版本
随机快速排序伪代码实现：
import random
A = [13,19,9,5,12,8,7,4,21,2,6,11]

def RandomizedQuickSort(A,p,r):
    if p < r-1:
        q = RandomizedPartition(A,p,r)
        RandomizedQuickSort(A,p,q)
        RandomizedQuickSort(A,q+1,r)
    
def Partition(A,p,r):
    x = A[r-1]
    i = p
    j = r-2
    while i <= j:
        if A[i] >= x >= A[j]:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
        elif A[i] < x:
            i += 1
        elif A[j] > x:
            j -= 1
    A[i],A[r-1] = A[r-1],A[i]
    return i

def RandomizedPartition(A,p,r):
    i = random.randint(p,r-1)
    A[i],A[r-1] = A[r-1],A[i]
    return  Partition(A,p,r)

RandomizedQuickSort(A,0,len(A))
print(A)
练习：
7.3-1：不会
7.3-2：不会
7.4 快速排序分析
练习：
7.4-1：不会
7.4-2：不会
7.4-3：不会
7.4-4：不会
7.4-5：k=10
7.4-6：不会
思考题：不会
