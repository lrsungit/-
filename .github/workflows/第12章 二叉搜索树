12.1 什么是二叉搜索树
中序遍历伪代码实现：
def InorderTreeWalk(x):
    if x:
        InorderTreeWalk(x.left)
        print x.key
        InorderTreeWalk(x.right)
练习：
12.1-1：过
12.1-2：最小堆是完全二叉树，并且每一个子节点都大于父节点。最小堆按序输出O（NlogN）。
12.1-3：
def Mid(root):
    stack = []
    r = root
    while stack or r:
        while r:
            stack.append(r)
            r = r.left
        if stack:
            r = stack.pop()
            print r.value
            r = r.right
12.1-4：
def Pre(root):
    if not root:return
    print (root.value)
    Pre(root.left)
    Pre(root.right)
    
def back(root):
    if not root:return
    Mid(root.left)
    Mid(root.right)
    print (root.value)
12.1-5:不会
12.2 查询二叉搜索树
二叉搜索树操作伪代码实现：
def TreeSearch(x,k):
    if not x or k == x.key:return x
    if k < x.key:
        return TreeSearch(x.left,k)
    else:
        return TreeSearch(x.right,k)

def IterativeTreeSearch(x,k):
    while x and k != x.key:
        if k < x.key:
            x = x.left
        else:
            x = x.right
    return x

def TreeMinimum(x):
    while x.left:
        x = x.left
    return x

def TreeMaximum(x):
    while x.right:
        x = x.right
    return x

def TreeSuccessor(x):
    if x.right:return TreeMinimum(x.right)
    y = x.p
    while x.p and x == y.right:
        x = y
        y = y.p
    return y

def TreePredecessor(x):
    if x.left:return TreeMaximum(x.left)
    y = x.p
    while x.p and x == y.left:
        x = y
        y = y.p
    return y
练习：
12.2-1：不会
12.2-2：
def TreeMinimum(x):
    if not x.left:return x
    return TreeMinimum(x.left)

def TreeMaximum(x):
    if not x.right:return x
    return TreeMinimum(x.right)
12.2-3:
def TreePredecessor(x):
    if x.left:return TreeMaximum(x.left)
    y = x.p
    while x.p and x == y.left:
        x = y
        y = y.p
    return y
12.2-4:不会
12.2-5:不会
12.2-6:不会
12.2-7:不会
12.2-8:不会
12.2-9:不会
12.3 插入和删除
