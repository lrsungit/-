9.1 最小值和最大值
同时找到最小值和最大值伪代码实现：
def MaxAndMin(A):
    n = len(A)
    if n%2 == 0:
        A_max,A_min = max(A[0], A[1]),min(A[0], A[1])
        for i in range(2,n,2):
            A_max = max(A_max, max(A[i], A[i+1]))
            A_min = min(A_min, min(A[i], A[i+1]))
    else:
        A_max,A_min = A[0],A[0]
        for i in range(1,n,2):
            A_max = max(A_max, max(A[i], A[i+1]))
            A_min = min(A_min, min(A[i], A[i+1]))
    return(A_max,A_min)
练习：
9.1-1:不会
9.1-2:不会
9.2 期望为线性时间的选择算法
顺序选择算法实现：
import random
A = [3,2,9,0,1,5,4,8,6,7]
def RandomizedSelect(A,p,r,i):
    if p == r-1:return A[p]
    q = RandomizedPartition(A,p,r)
    k = q-p+1
    if i == k:
        return A[q]
    elif i < k:
        return RandomizedSelect(A,p,q,i)
    else:
        return RandomizedSelect(A,q+1,r,i-k)
     
def Partition(A,p,r):
    x = A[r-1]
    i = p
    j = r-2
    while i <= j:
        if A[i] >= x >= A[j]:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
        elif A[i] < x:
            i += 1
        elif A[j] > x:
            j -= 1
    A[i],A[r-1] = A[r-1],A[i]
    return i

def RandomizedPartition(A,p,r):
    i = random.randint(p,r-1)
    A[i],A[r-1] = A[r-1],A[i]
    return Partition(A,p,r)

for i in range(len(A)):
    i += 1
    print(i,RandomizedSelect(A,0,len(A),i))  
练习：
9.2-1：不会
9.2-2：不会
9.2-3：
A = [3,2,9,0,1,5,4,8,6,7]
def RandomizedSelect(A,start,end,i):
    if start == end-1:return A[start]
    mid = Partition(A,start,end)
    small = mid-start+1
    while i != small:
        if i < small:
            end = mid          
        else:
            start = mid+1
            i = i-small
        mid = Partition(A,start,end)
        small = mid-start+1
    return A[mid]

     
def Partition(A,p,r):
    x = A[r-1]
    i = p
    j = r-2
    while i <= j:
        if A[i] >= x >= A[j]:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
        elif A[i] < x:
            i += 1
        elif A[j] > x:
            j -= 1
    A[i],A[r-1] = A[r-1],A[i]
    return i

def RandomizedPartition(A,p,r):
    i = random.randint(p,r-1)
    A[i],A[r-1] = A[r-1],A[i]
    return Partition(A,p,r)

for i in range(len(A)):
    i += 1
    print(i,RandomizedSelect(A,0,len(A),i))
9.2-4:不会
9.3 最坏情况为线性时间的选择算法
选择算法伪代码实现：
A = [3,2,9,0,1,5,4,8,6,7]
     
def Partition(A,p,r,m):
    A[r-1],A[m]=A[m],A[r-1]
    x = A[r-1]
    i = p
    j = r-2
    while i <= j:
        if A[i] >= x >= A[j]:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
        elif A[i] < x:
            i += 1
        elif A[j] > x:
            j -= 1
    A[i],A[r-1] = A[r-1],A[i]
    return i

def Slice(A,size):
    res = []
    n = len(A)
    k = n//size
    b = n%size
    for i in range(0,n-b,size):
        res.append(A[i:i+size])
    if b>0:
        res.append(A[-b:])
    return res

def InsertionSort(a):
    for j in range(1,len(a)):
        key = a[j]
        i = j-1
        while i >= 0 and a[i] > key:
            a[i+1] = a[i]
            i -= 1
        a[i+1] = key
    return a

def Get_Median(data):
    size = len(data)
    if size % 2 == 0:
        size -= 1
    median = data[(size-1)//2]
    return median

def Get_Median_Index(A,median):
    for i in range(len(A)):
        if A[i]==median:return i

n = 5
ASlice = Slice(A,n)
AMedian = []
for a in ASlice:
    AMedian.append(Get_Median(InsertionSort(a))) 
AMedianIndex = Get_Median_Index(A,Get_Median(AMedian))
k = Partition(A,0,len(A),AMedianIndex)

def Select(A,p,r,i):
    if p == r-1:return A[p]
    n = 5
    ASlice = Slice(A[p:r],n)
    AMedian = []
    for a in ASlice:
        AMedian.append(Get_Median(InsertionSort(a))) 
    AMedianIndex = Get_Median_Index(A,Get_Median(AMedian))
    q = Partition(A,p,r,AMedianIndex)
    k = q-p+1
    if i == k:
        return A[q]
    elif i < k:
        return Select(A,p,q,i)
    else:
        return Select(A,q+1,r,i-k)

for i in range(len(A)):
    i += 1
    print(i,Select(A,0,len(A),i))  
练习：
9.3-1：不会
9.3-2：不会
9.3-3：用中位数的方法选取快速排序中的比较基准
9.3-4：不会
9.3-5：不会
9.3-6：不会
9.3-7：不会
9.3-8：不会
9.3-9：不会
思考题：不会
