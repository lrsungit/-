9.1 最小值和最大值
同时找到最小值和最大值伪代码实现：
def MaxAndMin(A):
    n = len(A)
    if n%2 == 0:
        A_max,A_min = max(A[0], A[1]),min(A[0], A[1])
        for i in range(2,n,2):
            A_max = max(A_max, max(A[i], A[i+1]))
            A_min = min(A_min, min(A[i], A[i+1]))
    else:
        A_max,A_min = A[0],A[0]
        for i in range(1,n,2):
            A_max = max(A_max, max(A[i], A[i+1]))
            A_min = min(A_min, min(A[i], A[i+1]))
    return(A_max,A_min)
练习：
9.1-1:不会
9.1-2:不会
9.2 期望为线性时间的选择算法
顺序选择算法实现：
import random
A = [3,2,9,0,1,5,4,8,6,7]
def RandomizedSelect(A,p,r,i):
    if p == r-1:return A[p]
    q = Partition(A,p,r)
    k = q-p+1
    if i == k:
        return A[q]
    elif i < k:
        return RandomizedSelect(A,p,q,i)
    else:
        return RandomizedSelect(A,q+1,r,i-k)
     
def Partition(A,p,r):
    x = A[r-1]
    i = p
    j = r-2
    while i <= j:
        if A[i] >= x >= A[j]:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
        elif A[i] < x:
            i += 1
        elif A[j] > x:
            j -= 1
    A[i],A[r-1] = A[r-1],A[i]
    return i

def RandomizedPartition(A,p,r):
    i = random.randint(p,r-1)
    A[i],A[r-1] = A[r-1],A[i]
    return Partition(A,p,r)

for i in range(len(A)):
    i += 1
    print(i,RandomizedSelect(A,0,len(A),i))  
练习：
9.2-1：不会
9.2-2：不会
9.2-3：
