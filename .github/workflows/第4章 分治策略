4.1 最大子数组问题
股票低买高卖问题有θ（n）的解法，遍历股价时，记录一个最低价格，记录一个最大收益，遍历完成后就得到答案。
最大子数组伪代码实现：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
def FindMaxCrossingSubarrray(nums,low,mid,high):
    leftSum = nums[mid]
    leftMaxSum = nums[mid]
    leftMaxMark = mid
    mark = mid-1
    while mark >= low:
        leftSum += nums[mark]
        if leftSum >= leftMaxSum:
            leftMaxSum = leftSum
            leftMaxMark = mark
        mark -= 1
    rightSum = 0
    rightMaxSum = 0
    rightMaxMark = mid
    mark = mid+1
    while mark <= high:
        rightSum += nums[mark]
        if rightSum >= rightMaxSum:
            rightMaxSum = rightSum
            rightMaxMark = mark
        mark += 1
    return (leftMaxMark, rightMaxMark, leftMaxSum + rightMaxSum)

def FindMaxSubarray(nums,low,high):
    if high == low:return (low, high, nums[low])
    mid = (low + high)//2
    leftLow,leftHigh,leftSum = FindMaxSubarray(nums,low,mid)
    rightLow,rightHigh,rightSum = FindMaxSubarray(nums,mid+1,high)
    crossLow,crossHigh,crossSum = FindMaxCrossingSubarrray(nums,low,mid,high)
    if leftSum >= rightSum and leftSum >= crossSum:
        return(leftLow,leftHigh,leftSum)
    elif rightSum >= leftSum and rightSum >= crossSum:
        return(rightLow,rightHigh,rightSum)
    elif crossSum >= leftSum and crossSum >= leftSum:
        return(crossLow,crossHigh,crossSum)
    
print(FindMaxSubarray(a,0,len(a)-1))
    
练习：
4.1-1：
返还数组中的最大负数及下标
4.1-2：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
numMaxSum = a[0]
mark = [0,0]
for i in range(len(a)):
    numSum = a[i]
    j = i+1
    while j <= len(a)-1:
        numSum += a[j]
        if numMaxSum <= numSum:        
            numMaxSum = numSum
            mark = [i,j]
        j += 1
print(numMaxSum,mark)
4.1-3:不会
4.1-4:
即是当输入的数组中的值全为负时，输出为0与空数组。
a = [-3,-25,-3,-16,-23,-7,-5,-22,-4]
def FindMaxCrossingSubarrray(nums,low,mid,high):
    leftSum = nums[mid]
    leftMaxSum = nums[mid]
    leftMaxMark = mid
    mark = mid-1
    while mark >= low:
        leftSum += nums[mark]
        if leftSum >= leftMaxSum:
            leftMaxSum = leftSum
            leftMaxMark = mark
        mark -= 1
    rightSum = 0
    rightMaxSum = 0
    rightMaxMark = mid
    mark = mid+1
    while mark <= high:
        rightSum += nums[mark]
        if rightSum >= rightMaxSum:
            rightMaxSum = rightSum
            rightMaxMark = mark
        mark += 1
    return (leftMaxMark, rightMaxMark, leftMaxSum + rightMaxSum)

def FindMaxSubarray(nums,low,high):
    if high == low:return (low, high, nums[low])
    mid = (low + high)//2
    leftLow,leftHigh,leftSum = FindMaxSubarray(nums,low,mid)
    rightLow,rightHigh,rightSum = FindMaxSubarray(nums,mid+1,high)
    crossLow,crossHigh,crossSum = FindMaxCrossingSubarrray(nums,low,mid,high)
    if leftSum >= rightSum and leftSum >= crossSum:
        return(leftLow,leftHigh,leftSum)
    elif rightSum >= leftSum and rightSum >= crossSum:
        return(rightLow,rightHigh,rightSum)
    elif crossSum >= leftSum and crossSum >= leftSum:
        return(crossLow,crossHigh,crossSum)

def dfs(nums,low,high):
    if max(nums)<0:
        return (0,0,0)
    else:
        return FindMaxSubarray(nums,low,high)

print(dfs(a,0,len(a)-1))
4.1-5:
移动窗口：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
numSum = a[0]
numSumMax = a[0]
mark = [0,0]
maxMark = [0,0]
for n in range(1,len(a)-1):
    if numSum+a[n] >= a[n]:
        numSum += a[n]
        mark[1] = n
    else:
        numSum = a[n]
        mark = [n,n]
    if numSumMax < numSum:
        numSumMax = numSum
        maxMark = mark[:]
print (numSumMax,maxMark)
野路子：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
b = [0]
for n in range(len(a)):
    b.append(a[n]+b[n])
low = b[0]
res = b[0] - low
mark = [0,0]
for n in range(1,len(b)):
    if low>b[n]:     
        low = b[n]
        mark[0] = n 
    if b[n]-low>res:        
        res = b[n]-low
        mark[1] = n
print(res,mark)
4.2 矩阵乘法的Strassen算法




