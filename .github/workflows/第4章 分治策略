4.1 最大子数组问题
股票低买高卖问题有θ（n）的解法，遍历股价时，记录一个最低价格，记录一个最大收益，遍历完成后就得到答案。
最大子数组伪代码实现：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
def FindMaxCrossingSubarrray(nums,low,mid,high):
    leftSum = nums[mid]
    leftMaxSum = nums[mid]
    leftMaxMark = mid
    mark = mid-1
    while mark >= low:
        leftSum += nums[mark]
        if leftSum >= leftMaxSum:
            leftMaxSum = leftSum
            leftMaxMark = mark
        mark -= 1
    rightSum = 0
    rightMaxSum = 0
    rightMaxMark = mid
    mark = mid+1
    while mark <= high:
        rightSum += nums[mark]
        if rightSum >= rightMaxSum:
            rightMaxSum = rightSum
            rightMaxMark = mark
        mark += 1
    return (leftMaxMark, rightMaxMark, leftMaxSum + rightMaxSum)

def FindMaxSubarray(nums,low,high):
    if high == low:return (low, high, nums[low])
    mid = (low + high)//2
    leftLow,leftHigh,leftSum = FindMaxSubarray(nums,low,mid)
    rightLow,rightHigh,rightSum = FindMaxSubarray(nums,mid+1,high)
    crossLow,crossHigh,crossSum = FindMaxCrossingSubarrray(nums,low,mid,high)
    if leftSum >= rightSum and leftSum >= crossSum:
        return(leftLow,leftHigh,leftSum)
    elif rightSum >= leftSum and rightSum >= crossSum:
        return(rightLow,rightHigh,rightSum)
    elif crossSum >= leftSum and crossSum >= leftSum:
        return(crossLow,crossHigh,crossSum)
    
print(FindMaxSubarray(a,0,len(a)-1))
    
练习：
4.1-1：
返还数组中的最大负数及下标
4.1-2：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
numMaxSum = a[0]
mark = [0,0]
for i in range(len(a)):
    numSum = a[i]
    j = i+1
    while j <= len(a)-1:
        numSum += a[j]
        if numMaxSum <= numSum:        
            numMaxSum = numSum
            mark = [i,j]
        j += 1
print(numMaxSum,mark)
4.1-3:不会
4.1-4:
即是当输入的数组中的值全为负时，输出为0与空数组。
a = [-3,-25,-3,-16,-23,-7,-5,-22,-4]
def FindMaxCrossingSubarrray(nums,low,mid,high):
    leftSum = nums[mid]
    leftMaxSum = nums[mid]
    leftMaxMark = mid
    mark = mid-1
    while mark >= low:
        leftSum += nums[mark]
        if leftSum >= leftMaxSum:
            leftMaxSum = leftSum
            leftMaxMark = mark
        mark -= 1
    rightSum = 0
    rightMaxSum = 0
    rightMaxMark = mid
    mark = mid+1
    while mark <= high:
        rightSum += nums[mark]
        if rightSum >= rightMaxSum:
            rightMaxSum = rightSum
            rightMaxMark = mark
        mark += 1
    return (leftMaxMark, rightMaxMark, leftMaxSum + rightMaxSum)

def FindMaxSubarray(nums,low,high):
    if high == low:return (low, high, nums[low])
    mid = (low + high)//2
    leftLow,leftHigh,leftSum = FindMaxSubarray(nums,low,mid)
    rightLow,rightHigh,rightSum = FindMaxSubarray(nums,mid+1,high)
    crossLow,crossHigh,crossSum = FindMaxCrossingSubarrray(nums,low,mid,high)
    if leftSum >= rightSum and leftSum >= crossSum:
        return(leftLow,leftHigh,leftSum)
    elif rightSum >= leftSum and rightSum >= crossSum:
        return(rightLow,rightHigh,rightSum)
    elif crossSum >= leftSum and crossSum >= leftSum:
        return(crossLow,crossHigh,crossSum)

def dfs(nums,low,high):
    if max(nums)<0:
        return (0,0,0)
    else:
        return FindMaxSubarray(nums,low,high)

print(dfs(a,0,len(a)-1))
4.1-5:
移动窗口：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
numSum = a[0]
numSumMax = a[0]
mark = [0,0]
maxMark = [0,0]
for n in range(1,len(a)-1):
    if numSum+a[n] >= a[n]:
        numSum += a[n]
        mark[1] = n
    else:
        numSum = a[n]
        mark = [n,n]
    if numSumMax < numSum:
        numSumMax = numSum
        maxMark = mark[:]
print (numSumMax,maxMark)
野路子：
a = [13,-3,-25,20,-3,-16,-23,18,20,-7,12,-5,-22,15,-4,7]
b = [0]
for n in range(len(a)):
    b.append(a[n]+b[n])
low = b[0]
res = b[1] - low
mark = [0,0]
for n in range(1,len(b)):
    if b[n]-low>res:        
        res = b[n]-low
        mark[1] = n
    if low>b[n]:     
        low = b[n]
        mark[0] = n 
print(res,mark)
4.2 矩阵乘法的Strassen算法
矩阵乘法伪代码实现
a = [[1,3],[7,5]]
b = [[6,8],[4,2]]
n = len(a)
c = [([0]*n) for i in range(n)]
for i in range(n):
    for j in range(n):
        c[i][j] = 0
        for k in range(n):
            c[i][j] += a[i][k]*b[k][j]
print (c)
直接递归矩阵乘法
a = [[1,3],[7,5]]
b = [[6,8],[4,2]]

def SquareMatrixMultiplyRecursive(a,b):
    n = len(a)
    c = [([0]*n) for i in range(n)]
    if n == 1:
        c[0][0] = a[0][0] * b[0][0]
        return c
    else:
        a11,a12,a21,a22 = MatrixPartition(a)
        b11,b12,b21,b22 = MatrixPartition(b)
        c11 = MatrixAdd(SquareMatrixMultiplyRecursive(a11,b11),SquareMatrixMultiplyRecursive(a12,b21))
        c12 = MatrixAdd(SquareMatrixMultiplyRecursive(a11,b12),SquareMatrixMultiplyRecursive(a12,b22))
        c21 = MatrixAdd(SquareMatrixMultiplyRecursive(a21,b11),SquareMatrixMultiplyRecursive(a22,b21))
        c22 = MatrixAdd(SquareMatrixMultiplyRecursive(a21,b12),SquareMatrixMultiplyRecursive(a22,b22))
        return MatrixMerge(c11,c12,c21,c22)

def MatrixPartition(a):
    n = len(a)
    p = n//2
    a11 = [([0]*p) for i in range(p)]
    a12 = [([0]*p) for i in range(p)]
    a21 = [([0]*p) for i in range(p)]
    a22 = [([0]*p) for i in range(p)]
    for i in range(p):
        for j in range(p):
            a11[i][j] = a[i][j]
            a12[i][j] = a[i][j+p]
            a21[i][j] = a[i+p][j]
            a22[i][j] = a[i+p][j+p]
    return a11,a12,a21,a22
            
def MatrixAdd(a,b):
    n = len(a)
    c = [[0]*n for i in range(n)]
    for i in range(n):
        for j in range(n):
            c[i][j] = a[i][j]+b[i][j]
    return c

def MatrixMerge(a11,a12,a21,a22):
    p = len(a11)
    n = 2*p
    a = []
    a.extend(a11)
    a.extend(a21)
    for i in range(n):
        if i < p:
            a[i].extend(a12[i])
        else:
            a[i].extend(a22[i-p])
    return a

print (SquareMatrixMultiplyRecursive(a,b))
练习：
4.2-1:
直接写代码了，没有自己算
4.2-2:
a = [[1,3],[7,5]]
b = [[6,8],[4,2]]

def Strassen(a,b):
    n = len(a)
    c = [([0]*n) for i in range(n)]
    if n == 1:
        c[0][0] = a[0][0] * b[0][0]
        return c
    else:
        a11,a12,a21,a22 = MatrixPartition(a)
        b11,b12,b21,b22 = MatrixPartition(b)
        s1 = MatrixSub(b12,b22)
        s2 = MatrixAdd(a11,a12)
        s3 = MatrixAdd(a21,a22)
        s4 = MatrixSub(b21,b11)
        s5 = MatrixAdd(a11,a22)
        s6 = MatrixAdd(b11,b22)
        s7 = MatrixSub(a12,a22)
        s8 = MatrixAdd(b21,b22)
        s9 = MatrixSub(a11,a21)
        s10 = MatrixAdd(b11,b12)
        p1 = Strassen(a11,s1)
        p2 = Strassen(s2,b22)
        p3 = Strassen(s3,b11)
        p4 = Strassen(a22,s4)
        p5 = Strassen(s5,s6)
        p6 = Strassen(s7,s8)
        p7 = Strassen(s9,s10)
        c11 = MatrixAdd(MatrixSub(MatrixAdd(p5,p4),p2),p6)
        c12 = MatrixAdd(p1,p2)
        c21 = MatrixAdd(p3,p4)
        c22 = MatrixSub(MatrixSub(MatrixAdd(p5,p1),p3),p7)
        return MatrixMerge(c11,c12,c21,c22) 
 
def MatrixPartition(a):
    n = len(a)
    p = n//2
    a11 = [([0]*p) for i in range(p)]
    a12 = [([0]*p) for i in range(p)]
    a21 = [([0]*p) for i in range(p)]
    a22 = [([0]*p) for i in range(p)]
    for i in range(p):
        for j in range(p):
            a11[i][j] = a[i][j]
            a12[i][j] = a[i][j+p]
            a21[i][j] = a[i+p][j]
            a22[i][j] = a[i+p][j+p]
    return a11,a12,a21,a22
            
def MatrixAdd(a,b):
    n = len(a)
    c = [[0]*n for i in range(n)]
    for i in range(n):
        for j in range(n):
            c[i][j] = a[i][j]+b[i][j]
    return c

def MatrixSub(a,b):
    n = len(a)
    c = [[0]*n for i in range(n)]
    for i in range(n):
        for j in range(n):
            c[i][j] = a[i][j]-b[i][j]
    return c

def MatrixMerge(a11,a12,a21,a22):
    p = len(a11)
    n = 2*p
    a = []
    a.extend(a11)
    a.extend(a21)
    for i in range(n):
        if i < p:
            a[i].extend(a12[i])
        else:
            a[i].extend(a22[i-p])
    return a

print (Strassen(a,b))
4.2-3:看完4.5再回来做
4.2-4:看完4.5再回来做
4.2-5:看完4.5再回来做
4.2-6:不会
4.2-7:
a = 1
b = 2
c = 3
d = 4

def complexNumMultiply(a,b,c,d):
    p1 = a*d
    p2 = b*c
    p3 = (a+b)*(c-d)
    real = p3 - p2 + p1
    imaginary = p1 + p2
    return real,imaginary

print (complexNumMultiply(a,b,c,d))
4.3 用代入法求解递归式
